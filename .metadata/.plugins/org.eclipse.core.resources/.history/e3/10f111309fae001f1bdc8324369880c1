package keywords;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Sleeper;

import com.mysql.cj.log.Log;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNull;

import java.io.IOException;
import java.lang.System.Logger;
import java.util.List;
import java.util.Map;
import objectRepository.APIObject;
import objectRepository.ClerkObject;
import objectRepository.LoginObject;

public class Clerk extends ClerkObject{

    public static List<List<String>> setupClerkClearDBData(String filepath) {
    	
    	List<List<String>> csvContent = CSVReader.readCSVWithoutHeader(filepath);
    	System.out.println("\n\n\nCSV CONTENT: \n" + csvContent + "\n\n\n");
    	clearClerkDBFromCSV(csvContent, 0);
    	return csvContent;
    }

    public static void clearClerkDBFromCSV(List<List<String>> csvData, int columnIndex) {
    	
        if (csvData.isEmpty()) {
            System.out.println("No data to display.");
            return;
        }
        for (List<String> row : csvData) {
            if (columnIndex >= 0 && columnIndex < row.size()) {
            	Map<String, String> sql_dict = SQLHelper.createSQLDictionary();
            	sql_dict = SQLHelper.addToSQLDictionary(sql_dict, "value_natid", row.get(columnIndex));
            	SQLHelper.queryDatabaseAndReturnResult("delete_hero_by_natid", sql_dict);
            }
        }
    }
    
    public static void uploadCSVFilesViaClerkDashboard(WebDriver driver, String filepath, String flow) {
    	
    	System.out.println("Upload CSV files from clerk dashboard to create heroes");
    	if (lbl_header_clerk(driver).isDisplayed()) {
    		btn_add_hero_clerk(driver).click();
    		dropdown_option_upload_csv_clerk(driver).click();
    	}
    	System.out.println("Uploading CSV Files From Path " + filepath);
    	if (input_upload_csv_file_clerk(driver).isDisplayed()) {
    		input_upload_csv_file_clerk(driver).sendKeys(filepath);
    	}
    	btn_create_clerk(driver).click();
    	if (flow.equals("Positive")) {
    		lbl_created_success_clerk(driver).isDisplayed();
        	System.out.println("Upload successfully");
    	} else {
			lbl_created_unsuccess_warning_clerk(driver).isDisplayed();
	    	System.out.println("Upload failed with warning");
		}
    }
    
    public static void verifyUploadedDataInDB(List<List<String>> csvContent) {
    	
        for (List<String> row : csvContent) {
        	Map<String, String> sql_dict = SQLHelper.createSQLDictionary();
        	sql_dict = SQLHelper.addToSQLDictionary(sql_dict, "value_natid", row.get(0));
        	List<Map<String, Object>> sql_response = SQLHelper.queryDatabaseAndReturnResult("select_hero_by_natid", sql_dict);
        	Map<String, Object> selected_hero = sql_response.get(0);
        	Object actualnatid = selected_hero.get("natid");
        }
    	SQLHelper.queryDatabaseAndReturnResult(null, null);
    }
}
