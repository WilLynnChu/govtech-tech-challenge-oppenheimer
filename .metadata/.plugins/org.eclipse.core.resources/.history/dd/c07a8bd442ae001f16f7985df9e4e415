package keywords;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class SQLHelper {

    private static final String DB_URL = "jdbc:mysql://localhost:3306/testdb";
    private static final String DB_USER = "user";
    private static final String DB_PASSWORD = "userpassword";

    public static List<Map<String, Object>> queryDatabaseAndReturnResult(String sqlFileName, Map<String, String> argsDict){

    	try {
			return SQLHelper.queryDatabase(sqlFileName, null);
		} catch (SQLException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
    }
    
    public static List<Map<String, Object>> queryDatabase(String sqlFileName, Map<String, String> argsDict) throws SQLException, IOException {
        Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
        String updatedSqlQuery = updateSqlQueriesWithArgumentsDictionary(sqlFileName, argsDict);

        // Check if the SQL query contains 'DELETE' to determine execution path
        if (updatedSqlQuery.toUpperCase().contains("DELETE")) {
            executeSqlString(connection, updatedSqlQuery);
        } else {
            return query(connection, updatedSqlQuery);
        }
        connection.close();
        return null;
    }

    private static String updateSqlQueriesWithArgumentsDictionary(String sqlFileName, Map<String, String> argsDict) throws IOException {
        String sqlQuery = readFile(GenericKeywords.project_path + "/src/test/java/objectRepository/sql-queries/" + sqlFileName + ".sql");

        // Replace placeholders in the SQL query with values from argsDict
        if (argsDict != null && !argsDict.isEmpty()) {
            Set<Map.Entry<String, String>> entrySet = argsDict.entrySet();
            for (Map.Entry<String, String> entry : entrySet) {
                String key = entry.getKey();
                String value = entry.getValue();
                sqlQuery = sqlQuery.replace("{{" + key + "}}", value);
            }
        }
        return sqlQuery;
    }

    private static String readFile(String filePath) throws IOException {
        StringBuilder content = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }
        }
        return content.toString();
    }

    private static void executeSqlString(Connection connection, String sqlQuery) throws SQLException {
        try (PreparedStatement statement = connection.prepareStatement(sqlQuery)) {
            statement.executeUpdate();
        }
    }

    private static List<Map<String, Object>> query(Connection connection, String sqlQuery) throws SQLException {
    	
        List<Map<String, Object>> resultList = new ArrayList<>();
        
        try (PreparedStatement statement = connection.prepareStatement(sqlQuery);
             ResultSet resultSet = statement.executeQuery()) {
            
            // Get column names and build a list of column names
            int columnCount = resultSet.getMetaData().getColumnCount();
            while (resultSet.next()) {
                Map<String, Object> rowMap = new HashMap<>();
                for (int i = 1; i <= columnCount; i++) {
                    String columnName = resultSet.getMetaData().getColumnLabel(i);
                    Object columnValue = resultSet.getObject(i);
                    rowMap.put(columnName, columnValue);
                }
                resultList.add(rowMap);
            }
        }
        
        return resultList;
    }
    
    public static Map<String, String> createSQLDictionary(){
    	Map<String, String> sqlDict = new HashMap<>();
        sqlDict.put("value_start_time", testStartDateTime);
        sqlDict.put("value_current_time", testCurrentDateTime);
		return sqlDict;
    }
    
    public static Map<String, String> addToSQLDictionary(){
    	Map<String, String> sqlDict = new HashMap<>();
        sqlDict.put("value_start_time", testStartDateTime);
        sqlDict.put("value_current_time", testCurrentDateTime);
		return sqlDict;
    }
//    
//    
//        StringBuilder result = new StringBuilder();
//        try (PreparedStatement statement = connection.prepareStatement(sqlQuery);
//             ResultSet resultSet = statement.executeQuery()) {
//            while (resultSet.next()) {
//                // Assuming the result has columns you want to read; adjust as needed
//                result.append(resultSet.getString(1)).append("\t");
//            }
//        }
//        return result.toString();
//    }
}
